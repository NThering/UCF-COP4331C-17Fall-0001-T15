Tentative client-server communication model:
Communications will follow the space-delimited pattern of OPTYPE ACTION (ACTION), where:
	OPTYPE gives the general type of action the client would like the server to take and
	ACTION gives further information, I.E. username for login, password for login, article ID to retrieve.

Additionally, the client will be required to give the server a heartbeat ping every second to acknowledge that it is still connected.
	The purpose of this is to allow the server to identify client connections which have been dropped unceremoniously for cleanup.
		This will in turn allow us to avoid memory/resource leaks due to 'zombie' connections.
	The server listen timeout will be set to two seconds, and will count the number of consecutive timeouts and failed communication attempts.
		If this number passes an arbitrary threshold, the connection will be terminated.
		Any successful communication will reset the consecutive failure count to 0, so intermittent failures will not add up to a client termination.
		
A tentative mapping of the API codes is listed below:
* denotes a command that requires user permissions to be executed.
OPTYPE			ACTION		(ACTION)		PURPOSE
0				(none)		(none)			(heartbeat) Notifies server that connection is still live. Has no function otherwise and is simply discarded by parser
1				"username"	"Password"		logs in to the server. The majority of other commands will not be accessible until a valid login occurs.
											Sends string "0" upon success, "-1" upon failure.
2*				(none)		(none)			Logs the user out of the server.
3				"Username"	"Password"		Registers new user. Sends string "0" Upon success and "-1" upon failure.
4*				"main ID"	"sub ID"		Searches database for all articles matching the main and sub id, and sends arraylist<ArticleInfo> through object stream.
5*				"bytesize"	(none)			Prepares the server to receive an article file via a byte stream and a following articleInfo object.
6*				"articleID"	(none)			Asks the server to send an articleInfo object with the information regarding the given article through an object stream.
7*				"articleID"	(none)			Asks the server to send the given article file through a file stream, followed by the associated articleInfo
											Note that the client will have to prepare to receive another text line with the byte size of the file before receiving the article file.
8*				(none)		(none)			Returns the permission level number in string format.

THREE PRIMARY TYPES OF STREAM WILL BE USED:
1. BufferedReader/PrintWriter: For simple textual/numeric communications.
2. ObjectInputStream/ObjectOutputStream: For singular objects such as article info, array list, etc.
3. FileInputStream/FileOutputStream: For files. See http://www.java2s.com/Code/Java/Network-Protocol/TransferafileviaSocket.htm for examples.